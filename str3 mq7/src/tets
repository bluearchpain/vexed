#include <Arduino.h>

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <MQUnifiedsensor.h>
#include <Wire.h>
#include <WiFi.h>

// Firebase Libraries
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <iostream>
#include <string>

#include "SparkFunCCS811.h" //Click here to get the library: http://librarymanager/All#SparkFun_CCS811

#define CCS811_ADDR 0x5A // Default I2C Address
// #define CCS811_ADDR 0x5A //Alternate I2C Address

CCS811 mySensor(CCS811_ADDR);

#define DHTPIN 14 // Digital pin connected to the DHT sensor

#define DHTTYPE DHT11 // DHT 11

DHT_Unified dht(DHTPIN, DHTTYPE); // Initialize DHT sensor
sensors_event_t event;            // used by the DHT

#define Board ("ESP-32")         // Wemos ESP-32 or other board, whatever have ESP32 core.
#define Pin (25)                 // IO25 for your ESP32 WeMos Board, pinout here: https://i.pinimg.com/originals/66/9a/61/669a618d9435c702f4b67e12c40a11b8.jpg
#define Type ("MQ-7")            // MQ3 or other MQ Sensor, if change this verify your a and b values.
#define Voltage_Resolution (3.3) // 3V3 <- IMPORTANT. Source: https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/
#define ADC_Bit_Resolution (12)  // ESP-32 bit resolution. Source: https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/
#define RatioMQ7CleanAir 27.5    // RS / R0 = 3.6 ppm
MQUnifiedsensor MQ7(Board, Voltage_Resolution, ADC_Bit_Resolution, Pin, Type);

// Firebase credentials
// Firebase project API Key
#define API_KEY "AIzaSyBns6DSwAaBQTtt-gUasZlgN-4ca9ZPn4o"
// real-time database URL
#define DATABASE_URL "https://smart-home-bbcc3-default-rtdb.firebaseio.com"

// defining Firebase Data object
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
long sendDataPrevMillis = 0;
int read_data;
bool signupSuccess = false;

// Wifi-Credentials
#define WIFI_SSID "1"             //  WiFi SSID
#define WIFI_PASSWORD "123456789" //  WiFi password

// LED Pin on ESP32
#define LED_PIN 2

/**
 * Initializes the CCS811 and MQ7 sensors.
 *
 * The CCS811 sensor is started, and its begin() method is checked for errors.
 * If the CCS811 sensor initialization fails, the program will print an error
 * message and freeze.
 *
 * The MQ7 sensor is also initialized. The setRegressionMethod is set to 1,
 * which means that the PPM concentration will be calculated using the formula
 * _PPM =  a*ratio^b. The values of a and b are set using setA() and setB().
 * The MQ7 sensor is then calibrated using the calibrate() method, which
 * calculates the R0 value. The R0 value is then set using the setR0() method.
 * If the R0 value is invalid (either infinite or zero), the program will print
 * an error message and freeze.
 */
void setup()
{
  Serial.begin(115200);
  Serial.println("CCS811 Basic Example");

  Wire.begin(); // Inialize I2C Hardware

  if (mySensor.begin() == false)
  {
    Serial.print("CCS811 error. Please check wiring. Freezing...");
    while (1)
      ;
  }
  // Set math model to calculate the PPM concentration and the value of constants
  MQ7.setRegressionMethod(1); //_PPM =  a*ratio^b
  MQ7.setA(99.042);
  MQ7.setB(-1.518);
  MQ7.init();
  Serial.print("Calibrating please wait.");
  float calcR0 = 0;
  for (int i = 1; i <= 10; i++)
  {
    MQ7.update(); // Update data, the arduino will read the voltage from the analog pin
    calcR0 += MQ7.calibrate(RatioMQ7CleanAir);
    Serial.print(".");
  }
  MQ7.setR0(calcR0 / 10);
  Serial.println("  done!.");

  if (isinf(calcR0))
  {
    Serial.println("Warning: Conection issue, R0 is infinite (Open circuit detected) please check your wiring and supply");
    while (1)
      ;
  }
  if (calcR0 == 0)
  {
    Serial.println("Warning: Conection issue found, R0 is zero (Analog pin shorts to ground) please check your wiring and supply");
    while (1)
      ;
  }
  // wifi initialization
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  // Wait until the WiFi is connected
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  // Wait until the WiFi is connected
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // Assign the API key and database URL to the Firebase configuration
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  /* Sign up */
  Serial.println("Signing up...");
  if (Firebase.signUp(&config, &auth, "", ""))
  {
    Serial.println("ok");
    signupSuccess = true;
  }
  else
  {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  digitalWrite(LED_PIN, 250);
}

/**
 * Prints out the temperature and humidity values from the DHT sensor.
 *
 * The sensor is checked for data availability and if so, the
 * algorithm results are read and printed.
 */
void ReadDHT()
{
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature))
  {
    Serial.println(F("Error reading temperature!"));
  }
  else
  {
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("C"));
  }
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity))
  {
    Serial.println(F("Error reading humidity!"));
  }
  else
  {
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
  }
}

// Prints out the CO concentration from the MQ7 sensor.
//
// The sensor is updated and the equation coefficients are set.
// The CO concentration is then read and printed.
void ReadMQ7()
{
  MQ7.update(); // Update data, the arduino will read the voltage from the analog pin

  MQ7.setA(99.042);
  MQ7.setB(-1.518);            // Configure the equation to calculate CO concentration value
  float CO = MQ7.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup

  Serial.print("CO: ");
  Serial.print(CO);
  Serial.println(" ppm");
}

// Prints out the CO2 and TVOC values from the CCS811 sensor.
//
// The sensor is checked for data availability and if so, the
// algorithm results are read and printed.
void ReadCCS()
{
  // Check to see if data is ready with .dataAvailable()
  if (mySensor.dataAvailable())
  {
    // If so, have the sensor read and calculate the results.
    // Get them later
    mySensor.readAlgorithmResults();

    Serial.print("CO2[");
    // Returns calculated CO2 reading
    Serial.print(mySensor.getCO2());
    Serial.print("] tVOC[");
    // Returns calculated TVOC reading
    Serial.print(mySensor.getTVOC());

    Serial.print("]");
    Serial.println();
  }
}

/**
 * Prints out the sensor values in an infinite loop.
 *
 * Each loop, the CO2 and TVOC values from the CCS811 sensor,
 * the temperature and humidity values from the DHT sensor,
 * and the CO concentration from the MQ7 sensor are printed.
 *
 * The loop waits 1 second before re-reading the sensors.
 */
void loop()
{
  // ReadCCS();
  // ReadDHT();
  // ReadMQ7();

  Firebase.RTDB.setFloatAsync(&fbdo, "/test/value", 5.5);

  delay(1000);
}